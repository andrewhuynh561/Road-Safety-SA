@model Assig1.ViewModels.OffenceSearchViewModel

@{
    ViewData["Title"] = "Index";
}


<div class="bg-custom p-5">
    <h1>Offences DashBoard</h1>

</div>
@* 
   <p>
       <a asp-action="Create" class="btn btn-success">Create New Offence</a>
   </p>
 *@
<form asp-controller="Offences" asp-action="Index" method="get" class="row g-3 mb-4">

    <div class="col-md-4">
        <label for="SearchText" class="form-label"><strong>Search by Description</strong></label>
        <input type="text" class="form-control" asp-for="SearchText" id="searchText" placeholder="Enter description ..." title="Enter description" />
    </div>

    <div class="col-md-3">
        <label for="categoryId" class="form-label"><strong>Expiation Category</strong></label>
        <select asp-for="CategoryId" class="form-select" title="View categories" asp-items="Model.CategoryList" aria-label="Select category">
            <option value="">All Expiation Categories</option>
        </select>
    </div>

    <div class="col-md-3 align-self-end">
        <button id="searchBtn" class="btn btn-primary " type="submit">Search</button>
    </div>
</form>

<h3>Aggregate Statistics</h3>
<div class="row">
    <div class="col-md-6">
        <div class="alert alert-info">
            <strong>Total Offences Found:</strong> @Model.TotalOffences
        </div>
    </div>
    <div class="col-md-6">
        <div class="alert alert-info">
            <strong>Total Fees Collected:</strong> @Model.TotalFees
        </div>
    </div>
</div>

<h3>Total Offences Fee For Selected Category Chart</h3>

<div>
    <svg width="100%" height="800px" class="border border-primary rounded p-2"></svg>
</div>

@section Scripts {
    <script type="module">
        import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

        const svg = d3.select('svg');

        let w = svg.node().getBoundingClientRect().width;
        let h = svg.node().getBoundingClientRect().height;

        console.log('Width: ' + w);
        console.log('Height: ' + h);

        const chartMargins = {
            left: 40,
            right: 25,
            top: 30,
            bottom: 250
        };

        w = w - (chartMargins.left + chartMargins.right);
        h = h - (chartMargins.top + chartMargins.bottom);

        document.querySelector('[name="CategoryId"]').addEventListener('click', (event) => {
            let categoryId = event.target.value;
            console.log("categoryId: " + categoryId);

            // Fetch the data 
            if (categoryId > 0) {
                clearGraph();
                fetch(`/Offences/GetOffenceData?categoryId=${categoryId}`)
                    .then(response => {
                        console.log("response status: " + response.status);
                        console.log("response text: " + response.statusText);
                        return response.json();
                    })
                    .then(data => {
                        console.log("Fetched data: ", data);  
                        buildGraph(data);
                    })
                    .catch(err => console.log(err.message));
  
            }
        });

        function clearGraph() {
            d3.select('svg').selectAll("g").remove()
        }
        function buildGraph(dataSet) {
            console.log("DataSet: ", dataSet);
            let maxTotalFee = 0;

            // Handle empty dataset
            if (!dataSet || dataSet.length === 0) {
                console.log("Dataset is empty or undefined.");
            } else {
                // Calculate the maximum value 
                maxTotalFee = d3.max(dataSet, d => d.totalFee || 0);
                console.log("Max maxTotalFee: " + maxTotalFee);
            }

            const barMargin = 10;
            const barWidth = w / dataSet.length;
            console.log(barMargin)
            console.log(barWidth)

            //8 create a YScale
            let yScale = d3.scaleLinear()
                .domain([0, maxTotalFee])
                .range([h, 0]);

            //10 create xScale
            let desArray = Array.from(dataSet, (d, i) => d.description);
            console.log("array: " + desArray);

            let xScale = d3.scaleBand()
                .domain(desArray)
                .range([0, w])
                .paddingInner(0.1)

            // console.log("xScale: "+ xScale("March"))

            const chartGroup = svg.append('g')
                .classed('chartGroup', true)
                .attr('transform', `translate(${chartMargins.left},${chartMargins.top})`);

            //5 select all 'g' elements and bind the dataSet
            let barGroups = chartGroup
                .selectAll('g')
                .data(dataSet);

            //10 implement yScale
            var newBarGroups = barGroups.enter()
                .append('g')
                .attr('transform', (d, i) => {
                    return `translate(${xScale(d.description)},${yScale(d.totalFee)})`;
                    // returns transform ="translate(x,y)"
                }); // end transform

            //11 animate
            newBarGroups
                .append('rect')
                .attr('x', 0)
                .attr('height', (d, i) => { return h - yScale(d.totalFee); })
                .attr('width', xScale.bandwidth())
                .attr('fill', 'transparent')
                .transition().duration((d, i) => i * 500) //perform transition over 1s
                .delay((d, i) => i + 200) // transition each col 1 by 1
                .attr('y', 0)
                .attr('height', (d, i) => { return h - yScale(d.totalFee); })
                .style("fill", (d, i) => { return `rgb(20, 20, ${i * 15 + 80})` })


            //14 create bar text
            newBarGroups
                .append('text')
                .attr("text-anchor", "middle")
                .attr('x', (d, i) => { return xScale.bandwidth() / 2; })
                .attr('y', 20)
                .attr('fill', 'white')
                .style('font-size', '1em')
                .text((d, i) => d.totalFee.toLocaleString());

            //11 create the axis and add it to the svg
            //12.5 append the y-Axix to the chartGroup
            let yAxis = d3.axisLeft(yScale);  
            chartGroup.append('g')
                .classed('axis y', true)
                .call(yAxis);

            //13 append the x-Axis to the chartGroup
            let xAxis = d3.axisBottom(xScale); // declare the axis generator
            chartGroup.append('g')
                .attr('transform', `translate(0, ${h})`)
                .classed('axis x', true)
                .call(xAxis);

            chartGroup.selectAll('.axis.x text')
                .attr("transform", "rotate(-70)")
                .attr("dx", "-0.8em")
                .attr("dy", "0.25em")
                .style("text-anchor", "end")
                .style("font-size", "0.9em");

        }
    </script>
}


@if (Model.Offences != null && Model.Offences.Any())
{   
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>@Html.DisplayNameFor(model => model.Offences.First().Description)</th>
                <th>@Html.DisplayNameFor(model => model.Offences.First().ExpiationFee)</th>
                <th>@Html.DisplayNameFor(model => model.Offences.First().TotalFee)</th>
                <th>@Html.DisplayNameFor(model => model.Offences.First().DemeritPoints)</th>
                <th>@Html.DisplayNameFor(model => model.Offences.First().SectionCode)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var offence in Model.Offences)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => offence.Description)</td>
                    <td>@Html.DisplayFor(modelItem => offence.ExpiationFee)</td>
                    <td>@Html.DisplayFor(modelItem => offence.TotalFee)</td>
                    <td>@Html.DisplayFor(modelItem => offence.DemeritPoints)</td>
                    <td>@Html.DisplayFor(modelItem => offence.SectionCode)</td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@offence.OffenceCode" class="btn btn-warning btn-sm">Edit</a>
                        <a asp-action="Details" asp-route-id="@offence.OffenceCode" class="btn btn-info btn-sm">Details</a>
                        <a asp-action="Delete" asp-route-id="@offence.OffenceCode" class="btn btn-danger btn-sm">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="alert alert-warning">No offences found.</p>
}

